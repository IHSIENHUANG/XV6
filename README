There is a report.pdf, including all details about how to add a system call && how the stride and Lottery scheduling work. 

[BACKGROUND]
AOS XV6
● sysproc.c add the real implementation of your method here
● syscall.h define the position of the system call vector that connect to your
  implementation
● user.h define the function that can be called through the shell
● syscall.c external define the function that connect the shell and the kernel, use the
   position defined in
● syscall.h to add the function to the system call vector
● usys.S use the macro to define connect the call of user to the system call function
● defs.h add a forward declaration for your new system call
● sysfunc.h add the new system call handler into this file too like "int
  sys_newsystemcall(void)
● Proc.c record the function what you want to do
info(parameter): 1,2,3
(1) A count of the processes in the system;
    -> look into the ptable (recorded the processes) and find out (~UNUSED)
(2) A count of the total number of system calls that a process has done so far
    -> in proc.h declare a parameter to keep the number, and every time when the system call
        Syscall, take a record.
(3) The number of memory pages the current process is using.
    -> in proc.h there is a parameter to record process size (sz) , and divide it by the page size

[note]
How to pass a parameter into a syscall?
-> use argint(0, &parameter) to read the parameter passed by the user program.
(called in the syscall.c)
How to add a system call?
1. usys.S: add the system call
2. Syscall.h: define the syscall num
3. syscall.c :
4. Sysproc.c: call the function u write in the proc.c
5. Proc.c: write your code into the function
6. Def.h: add a forward declaration for your new system call
7. User.h: define the function that can be called through the shell

# [note]
How to decide the CPU number to 1? ( recorded in the Makefile)
-> make CPUS=1 qemu-nox
Normally, scheduling in xv6 is to search into the ptable and find out the state is RUNNABLE
If there are three processes A.B.C, run at the same time, it will find the first process and run it,
and after a time ticker, keep searching in the ptable and find another RUNNABLE process.
Therefore, the sequence will be A.B,C,A,B,C,A,B,C,A,B,C,A,B,C…………..
//to decide what kind of scheduling the user want
#define STRIDE 0
#define LOTTERY 1
LOTTERY SCHEDULING:
In the Lottery Scheduling. Every process has a given tickets, and every time scheduling the
system will generate a random number between 0 ~ toal_tickets ( sum the tickets of
RUNNABLE processes).
For example:
A: tickets = 10, B: 20, C:30; and assume the sequence in the ptable is A,B,C.
Hence, when the system generate the number 0~10: A will be chosen, 11~30, B: will be
chosen...
[TEST] prog 1&;prog 3
1 means tickets is 10;
3 means tickets is 30;
Consequently, we can make sure that the scheduling is correct, for the reason that the ratio of
running times is consistent with the ratio of the tickets number.

STRIDE SCHEDULING:
The concept is every process has its own tickets, and the stride is COSTANT/tickets. That
means that the more tickets the process have, the less stride it has. And every time scheduling,
search into all RUNNABLE processes, and run the min cur_stride. The chosen process will add
stride to the cur_stride.
Stride is const but the accumulation stride is not.
# [TEST]
prog 10&; prog 5&; prog 25&
prog 100 tickets -> stride 100
prog 50 tickets -> stride 200
Prog 250 tickets -> stride 40

----------------------------------------------------------------------------------------------------------
xv6 is a re-implementation of Dennis Ritchie's and Ken Thompson's Unix
Version 6 (v6).  xv6 loosely follows the structure and style of v6,
but is implemented for a modern x86-based multiprocessor using ANSI C.

ACKNOWLEDGMENTS

xv6 is inspired by John Lions's Commentary on UNIX 6th Edition (Peer
to Peer Communications; ISBN: 1-57398-013-7; 1st edition (June 14,
2000)). See also http://pdos.csail.mit.edu/6.828/2016/xv6.html, which
provides pointers to on-line resources for v6.

xv6 borrows code from the following sources:
    JOS (asm.h, elf.h, mmu.h, bootasm.S, ide.c, console.c, and others)
    Plan 9 (entryother.S, mp.h, mp.c, lapic.c)
    FreeBSD (ioapic.c)
    NetBSD (console.c)

The following people have made contributions: Russ Cox (context switching,
locking), Cliff Frey (MP), Xiao Yu (MP), Nickolai Zeldovich, and Austin
Clements.

We are also grateful for the bug reports and patches contributed by Silas
Boyd-Wickizer, Anton Burtsev, Cody Cutler, Mike CAT, Tej Chajed, Nelson Elhage,
Saar Ettinger, Alice Ferrazzi, Nathaniel Filardo, Peter Froehlich, Yakir Goaron,
Shivam Handa, Bryan Henry, Jim Huang, Alexander Kapshuk, Anders Kaseorg,
kehao95, Wolfgang Keller, Eddie Kohler, Austin Liew, Imbar Marinescu, Yandong
Mao, Hitoshi Mitake, Carmi Merimovich, Joel Nider, Greg Price, Ayan Shafqat,
Eldar Sehayek, Yongming Shen, Cam Tenny, Rafael Ubal, Warren Toomey, Stephen Tu,
Pablo Ventura, Xi Wang, Keiichi Watanabe, Nicolas Wolovick, Grant Wu, Jindong
Zhang, Icenowy Zheng, and Zou Chang Wei.

The code in the files that constitute xv6 is
Copyright 2006-2016 Frans Kaashoek, Robert Morris, and Russ Cox.

ERROR REPORTS

Please send errors and suggestions to Frans Kaashoek and Robert Morris
(kaashoek,rtm@mit.edu). The main purpose of xv6 is as a teaching
operating system for MIT's 6.828, so we are more interested in
simplifications and clarifications than new features.

BUILDING AND RUNNING XV6

To build xv6 on an x86 ELF machine (like Linux or FreeBSD), run
"make". On non-x86 or non-ELF machines (like OS X, even on x86), you
will need to install a cross-compiler gcc suite capable of producing
x86 ELF binaries. See http://pdos.csail.mit.edu/6.828/2016/tools.html.
Then run "make TOOLPREFIX=i386-jos-elf-". Now install the QEMU PC
simulator and run "make qemu".
